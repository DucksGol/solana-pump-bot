# telegram_bot.py

from telegram import Update
from telegram.ext import Updater, CommandHandler, CallbackContext
import json

config = json.load(open("config.json"))

def start(update: Update, context: CallbackContext):
    if update.effective_user.id != config["allowed_user_id"]:
        update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    update.message.reply_text("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/set_wallet\n/set_percent\n/balance\n/stats")

def set_wallet(update: Update, context: CallbackContext):
    if update.effective_user.id != config["allowed_user_id"]:
        return
    new_wallet = ' '.join(context.args)
    config["wallet_address"] = new_wallet
    with open("config.json", "w") as f:
        json.dump(config, f)
    update.message.reply_text(f"‚úÖ –ö–æ—à–µ–ª–µ–∫ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞: {new_wallet}")

def set_percent(update: Update, context: CallbackContext):
    if update.effective_user.id != config["allowed_user_id"]:
        return
    try:
        percent = int(context.args[0])
        if 0 <= percent <= 100:
            config["withdraw_percent"] = percent
            with open("config.json", "w") as f:
                json.dump(config, f)
            update.message.reply_text(f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–≤–æ–¥–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {percent}%")
        else:
            update.message.reply_text("‚ùó –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.")
    except:
        update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_percent <value>")

def balance(update: Update, context: CallbackContext):
    update.message.reply_text("üí∞ –ë–∞–ª–∞–Ω—Å: 1.2 SOL / $240")

def stats(update: Update, context: CallbackContext):
    update.message.reply_text("üìä –ü—Ä–∏–±—ã–ª—å –∑–∞ —Å–µ–≥–æ–¥–Ω—è: +$750\n–°–¥–µ–ª–æ–∫: 3")

def run_telegram_bot():
    updater = Updater(config["telegram_token"])
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(CommandHandler("set_wallet", set_wallet))
    dp.add_handler(CommandHandler("set_percent", set_percent))
    dp.add_handler(CommandHandler("balance", balance))
    dp.add_handler(CommandHandler("stats", stats))

    updater.start_polling()
    updater.idle()
